//作者：冼树华
//QQ:  56472465

import UIKit

//1.使用类中定义的实例方法
enum 怪物经验对应列表:Int{
    case 骷髅兵 = 10, 毒虫 = 20, 独眼巨人 = 30, 幽灵 = 40, 骷髅弓箭手 = 50, 地狱猎犬怪 = 60, 地狱蜘蛛 = 70, 骷髅战士 = 80, 死灵法师 = 90, 毒牛怪 = 100, 暗黑骑士 = 200, 魔鬼戈登 = 500
}

struct 服务器经验倍数 {
    var 开启 = false
    var 倍数 = 0
}

class 人民币玩家{
    var 经验值 = 0
    var 服倍数 = 服务器经验倍数()
    
    func 挂机经验(){
        经验值 += 200
        print("当前角色的挂机经验值是：\(经验值)")
    }
    
    func 打怪经验(怪物经验值 怪物经验值: Int, 经验倍数: Int){
        经验值 += (怪物经验值 * 经验倍数)
        if(服倍数.开启 && 服倍数.倍数 > 1){
            经验值 *= self.服倍数.倍数
        }
        print("当前角色的打怪经验值是：\(经验值)")
    }
    
}

var 人民币法师 = 人民币玩家()
人民币法师.挂机经验()
人民币法师.打怪经验(怪物经验值: 怪物经验对应列表.暗黑骑士.rawValue, 经验倍数: 3)
人民币法师.服倍数.开启 = true
人民币法师.服倍数.倍数 = 2
人民币法师.打怪经验(怪物经验值: 怪物经验对应列表.魔鬼戈登.rawValue, 经验倍数: 3)


//2.使用结构体中的实例方法（变异方法）
struct 角色坐标 {
    var x = 0, y = 0
    
    mutating func 安全区坐标(横坐标:Int,纵坐标:Int){
        self.x = 横坐标
        self.y = 纵坐标
        print("你所移动到的安全去坐标是：x: \(self.x), y: \(self.y)")
    }
    
}
var 某坐标 = 角色坐标()
某坐标.安全区坐标(500, 纵坐标: 500)


//3.使用枚举的实例方法（变异方法）
enum 猜拳{
    case 剪刀,石头,布
    mutating func 出拳(){
        //print("我出拳：\(self), ",false)
        print("我出拳：\(self)，",terminator:"")
        switch self{
            case 剪刀: self = 石头
            case 石头: self = 布
            case 布: self = 剪刀
        }
        print("你要赢我，你出拳：\(self)")
    }
}

var 我出拳 = 猜拳.剪刀
我出拳.出拳()


//4.使用类的静态方法
class 玩家{
    static var 姓名 = ""
    class func 服务器名(){
        print("\(姓名) 在珠海电信一区")
    }
    
}
玩家.姓名 = "上官卫生"
玩家.服务器名()



//5.使用结构体中的静态方法
struct 复活{
    static var HP = 0
    static func 复活点(当前区域 当前区域:String){
        print("\(当前区域 )安全区，你当前HP为：\(HP)")
    }
}
复活.复活点(当前区域: "死亡沙漠")





